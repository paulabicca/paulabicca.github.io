<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on Paula Bicca</title><link>https://paulabicca.github.io/en/tags/web/</link><description>Recent content in Web on Paula Bicca</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 16 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://paulabicca.github.io/en/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Why You Should Start Using prefers-reduced-motion</title><link>https://paulabicca.github.io/en/p/why-you-should-start-using-prefers-reduced-motion/</link><pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate><guid>https://paulabicca.github.io/en/p/why-you-should-start-using-prefers-reduced-motion/</guid><description>&lt;p>On the web, animations and visual effects are popular tools to make pages more dynamic and engaging. However, for some users—especially those sensitive to rapid or excessive motion—these features can cause discomfort, such as nausea or dizziness.&lt;/p>
&lt;p>Fortunately, we can use &lt;code>prefers-reduced-motion&lt;/code>,, which allows us to adjust or disable animations, offering a smoother alternative for those who prefer a more stable browsing experience. In this text, we’ll explore what &lt;code>prefers-reduced-motion&lt;/code>, is, how to implement it on your site, and how users (including you, if desired) can adjust their preferences for a more comfortable experience.&lt;/p>
&lt;h2 id="what-is-prefers-reduced-motion">&lt;strong>What is prefers-reduced-motion?&lt;/strong>
&lt;/h2>&lt;p>&lt;code>prefers-reduced-motion&lt;/code> is a CSS feature that allows developers to adjust the browsing experience for users who prefer to reduce or eliminate animations and motion in the interface. This is especially important for those who feel uncomfortable with excessive motion on the screen, such as visual effects or autoplaying videos.&lt;/p>
&lt;p>The &amp;ldquo;reduce motion&amp;rdquo; setting can be enabled directly in the user’s system preferences. When enabled, the browser communicates this preference, allowing developers to adapt the page content—whether by disabling animations or reducing their intensity. This can range from turning off autoplay videos to restructuring interface interactions, making them more stable and simplified for those who prefer less motion.&lt;/p>
&lt;h2 id="how-to-adjust-your-preferences">&lt;strong>How to Adjust Your Preferences&lt;/strong>
&lt;/h2>&lt;p>The &amp;ldquo;reduce motion&amp;rdquo; setting can be enabled directly in your device settings. Here’s how to modify your preferences on different systems:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Windows 10:&lt;/strong> Settings &amp;gt; Ease of Access &amp;gt; Video &amp;gt; Show animations in Windows.&lt;/li>
&lt;li>&lt;strong>Windows 11:&lt;/strong> Settings &amp;gt; Accessibility &amp;gt; Visual Effects &amp;gt; Animation effects.&lt;/li>
&lt;li>&lt;strong>macOS:&lt;/strong> System Preferences &amp;gt; Accessibility &amp;gt; Display &amp;gt; Reduce Motion.&lt;/li>
&lt;li>&lt;strong>iOS:&lt;/strong> Settings &amp;gt; Accessibility &amp;gt; Motion.&lt;/li>
&lt;li>&lt;strong>Android 9+:&lt;/strong> Settings &amp;gt; Accessibility &amp;gt; Remove Animations.&lt;/li>
&lt;/ul>
&lt;h2 id="why-is-prefers-reduced-motion-important-for-accessibility">&lt;strong>Why is prefers-reduced-motion Important for Accessibility?&lt;/strong>
&lt;/h2>&lt;p>Implementing this feature is a crucial aspect of web accessibility, particularly under the AAA criterion of the WCAG (Web Content Accessibility Guidelines), specifically item 2.3.3: Animation from Interactions. Learn more about it &lt;a class="link" href="https://www.w3.org/WAI/WCAG21/Techniques/css/C39" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>Some users, especially those with vestibular conditions, may experience unwanted side effects from animations, such as dizziness or nausea. For example, in pages with parallax scrolling (where the background moves at a different pace than the main content), the extra motion can trigger these issues, even if the scrolling itself is user-controlled.&lt;/p>
&lt;p>By integrating &lt;code>prefers-reduced-motion&lt;/code>, you provide a more comfortable alternative for these users, ensuring a more inclusive experience.&lt;/p>
&lt;h2 id="how-to-implement-prefers-reduced-motion-in-css">&lt;strong>How to Implement prefers-reduced-motion in CSS&lt;/strong>
&lt;/h2>&lt;p>Implementing &lt;code>prefers-reduced-motion&lt;/code> in CSS is simple. Just add a media query that detects the user’s preference and applies alternative styles when the setting is enabled. Here’s an example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="k">media&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nt">prefers-reduced-motion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">reduce&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nc">notification&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">animation&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">transition&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">none&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://codepen.io/paulabicca/pen/wBwgwYo" target="_blank" rel="noopener"
>Try it out on CodePen!&lt;/a>&lt;br>
(&lt;em>(Don’t forget to disable “Animation effects” in your system settings.)&lt;/em>)&lt;/p>
&lt;h2 id="how-to-implement-prefers-reduced-motion-in-javascript">&lt;strong>How to Implement prefers-reduced-motion in JavaScript&lt;/strong>
&lt;/h2>&lt;p>In JavaScript, you can use the &lt;code>window.matchMedia&lt;/code> property to detect the user’s preference for reduced motion and modify the page behavior accordingly. Here’s how:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">prefersReducedMotion&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">matchMedia&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;(prefers-reduced-motion: reduce)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://codepen.io/paulabicca/pen/zxONOym" target="_blank" rel="noopener"
>Try it out on CodePen!&lt;/a>&lt;br>
(&lt;em>(Don’t forget to disable “Animation effects” in your system settings.)&lt;/em>)&lt;/p>
&lt;h2 id="why-you-should-start-using-prefers-reduced-motion">&lt;strong>Why You Should Start Using prefers-reduced-motion?&lt;/strong>
&lt;/h2>&lt;p>Incorporating &lt;code>prefers-reduced-motion&lt;/code> into your site isn’t just a technical decision—it’s a commitment to inclusion. By allowing users to choose how they interact with your page, you provide a more comfortable and accessible experience for everyone.&lt;/p>
&lt;p>Additionally, this practice enhances compliance with accessibility guidelines, ensuring your page is accessible to a wider audience, including those with conditions that make excessive animations challenging. Whenever possible, implement solutions that respect the preference for less motion, fostering a more inclusive and less exhausting web for all.&lt;/p></description></item><item><title>WAI-ARIA &amp; semantic HTML: Partners in Accessibility</title><link>https://paulabicca.github.io/en/p/wai-aria-semantic-html-partners-in-accessibility/</link><pubDate>Fri, 29 Nov 2024 00:00:00 +0000</pubDate><guid>https://paulabicca.github.io/en/p/wai-aria-semantic-html-partners-in-accessibility/</guid><description>&lt;p>When it comes to web development, &lt;strong>semantic HTML&lt;/strong> and &lt;strong>WAI-ARIA&lt;/strong> are like two inseparable partners, working together to make your site more accessible and easier to understand. You probably already know about &lt;strong>semantic HTML&lt;/strong>, but what is &lt;strong>WAI-ARIA&lt;/strong>? Let&amp;rsquo;s unravel both in a simple and uncomplicated way&lt;/p>
&lt;hr>
&lt;h2 id="semantic-html-the-basics-of-structure">Semantic HTML: The Basics of Structure
&lt;/h2>&lt;p>First, let&amp;rsquo;s talk about &lt;strong>semantic HTML&lt;/strong>. What does this mean? Basically, it&amp;rsquo;s the use of HTML tags that have a clear and well-defined meaning, both for the browser and for users. By using semantic elements, you are creating code that not only makes more sense to developers, but also improves the experience of users, especially those with disabilities.&lt;/p>
&lt;p>For example, instead of using &lt;code>&amp;lt;div&amp;gt;&lt;/code> and adding style attributes to make it behave like a button, you should use the &lt;code>&amp;lt;button&amp;gt;&lt;/code> tag, which is already semantically defined for this function. This helps with accessibility and makes the code easier to understand.&lt;/p>
&lt;p>Example of Semantic HTML:&lt;/p>
&lt;p>&lt;strong>Avoid:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">role&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;button&amp;#34;&lt;/span> &lt;span class="na">aria-label&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Send&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Prefer:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">aria-label&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Send&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Opting for &lt;strong>semantic HTML&lt;/strong>, such as &lt;code>&amp;lt;button&amp;gt;&lt;/code>, not only improves accessibility, but also offers other benefits:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Better performance on mobile devices:&lt;/strong> Semantic HTML is lighter and makes it easier to create responsive layouts.&lt;/li>
&lt;li>&lt;strong>Better SEO:&lt;/strong> Search engines give more relevance to semantic elements such as titles and links, making it easier to index your content.&lt;/li>
&lt;li>&lt;strong>Ease of development:&lt;/strong> The code is cleaner, more intuitive and easier to understand.&lt;/li>
&lt;/ul>
&lt;p>Now let&amp;rsquo;s look at some examples.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Generic Example&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Semantic Example&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Description&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>&amp;lt;div id=&amp;quot;header&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;header&amp;gt;&lt;/code>&lt;/td>
&lt;td>Defines the header of a page or section.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;div id=&amp;quot;nav&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;nav&amp;gt;&lt;/code>&lt;/td>
&lt;td>Defines a navigation block.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;div class=&amp;quot;article&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;article&amp;gt;&lt;/code>&lt;/td>
&lt;td>Represents independent content, such as a post.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;div class=&amp;quot;section&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;section&amp;gt;&lt;/code>&lt;/td>
&lt;td>Defines a section or piece of content with a title.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;footer&amp;gt;&lt;/code>&lt;/td>
&lt;td>Represents the footer of a page or section.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;div class=&amp;quot;main&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;main&amp;gt;&lt;/code>&lt;/td>
&lt;td>Defines the main content of the page.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;div id=&amp;quot;aside&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;aside&amp;gt;&lt;/code>&lt;/td>
&lt;td>Represents related but non-essential content.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;div class=&amp;quot;heading&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;h1&amp;gt;&lt;/code>, &lt;code>&amp;lt;h2&amp;gt;&lt;/code>, &lt;code>&amp;lt;h3&amp;gt;&lt;/code>, etc.&lt;/td>
&lt;td>Defines headings and subheadings, structuring the content.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;div class=&amp;quot;button&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;button&amp;gt;&lt;/code>&lt;/td>
&lt;td>Represents an action button.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="wai-aria-giving-accessibility-a-hand">WAI-ARIA: Giving Accessibility a Hand
&lt;/h2>&lt;p>Now, &lt;strong>WAI-ARIA&lt;/strong> (Accessible Rich Internet Applications) comes into the picture. It&amp;rsquo;s like an extra assistant, helping to make your site accessible when &lt;strong>semantic HTML&lt;/strong> isn&amp;rsquo;t enough to describe the functionality of an element, such as in dynamic applications or more complex interfaces. The &lt;strong>WAI-ARIA&lt;/strong> provides &amp;ldquo;extra information&amp;rdquo; for assistive technologies, such as screen readers, to ensure that all users, regardless of their limitations, can interact with the content efficiently.&lt;/p>
&lt;p>Now that you know what &lt;strong>WAI-ARIA&lt;/strong> is, let&amp;rsquo;s talk about two of its attributes: &lt;strong>aria&lt;/strong> and &lt;strong>role&lt;/strong>.&lt;/p>
&lt;hr>
&lt;h3 id="aria-attributes">ARIA Attributes
&lt;/h3>&lt;p>&lt;strong>ARIA attributes&lt;/strong> are used to provide additional information to assistive technologies, such as screen readers, when standard HTML is not sufficient to clearly describe the functionality or state of an element.&lt;/p>
&lt;p>Below are some common &lt;strong>ARIA attributes&lt;/strong> that can be very useful in your day-to-day development. For a complete list, check the documentation &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Examples of ARIA Attributes:&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ARIA Attributes&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>aria-label&lt;/strong>&lt;/td>
&lt;td>Provides a descriptive text for interface elements without visible text.&lt;/td>
&lt;td>&lt;code>&amp;lt;button aria-label=&amp;quot;Close&amp;quot;&amp;gt;X&amp;lt;/button&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>aria-hidden&lt;/strong>&lt;/td>
&lt;td>Hides an element from screen readers without affecting its visibility.&lt;/td>
&lt;td>&lt;code>&amp;lt;div aria-hidden=&amp;quot;true&amp;quot;&amp;gt;This content will not be read by the screen reader&amp;lt;/div&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>aria-description&lt;/strong>&lt;/td>
&lt;td>Provides a more detailed description of an element.&lt;/td>
&lt;td>&lt;code>&amp;lt;div aria-description=&amp;quot;This button submits the form&amp;quot;&amp;gt;Enviar&amp;lt;/div&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>contenteditable&lt;/strong>&lt;/td>
&lt;td>Indicates that a field is editable, useful when using a &lt;code>&amp;lt;div&amp;gt;&lt;/code> instead of an &lt;code>&amp;lt;input&amp;gt;&lt;/code>.&lt;/td>
&lt;td>&lt;code>&amp;lt;div contenteditable=&amp;quot;true&amp;quot;&amp;gt;Edit this text&amp;lt;/div&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>aria-required&lt;/strong>&lt;/td>
&lt;td>Marks a form field as required.&lt;/td>
&lt;td>&lt;code>&amp;lt;input type=&amp;quot;text&amp;quot; aria-required=&amp;quot;true&amp;quot; /&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>aria-invalid&lt;/strong>&lt;/td>
&lt;td>Indicates that a field contains an invalid value.&lt;/td>
&lt;td>&lt;code>&amp;lt;input type=&amp;quot;text&amp;quot; aria-invalid=&amp;quot;true&amp;quot; /&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>aria-expanded&lt;/strong>&lt;/td>
&lt;td>Specifies whether a menu or accordion is expanded or collapsed.&lt;/td>
&lt;td>&lt;code>&amp;lt;button aria-expanded=&amp;quot;false&amp;quot;&amp;gt;Menu&amp;lt;/button&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>aria-labelledby&lt;/strong>&lt;/td>
&lt;td>References another element to provide an accessible name.&lt;/td>
&lt;td>&lt;code>&amp;lt;h1 id=&amp;quot;header&amp;quot;&amp;gt;Title&amp;lt;/h1&amp;gt;&amp;lt;div aria-labelledby=&amp;quot;header&amp;quot;&amp;gt;Content associated with the title&amp;lt;/div&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>aria-details&lt;/strong>&lt;/td>
&lt;td>Provides additional information or a more detailed description of an element.&lt;/td>
&lt;td>&lt;code>&amp;lt;button aria-details=&amp;quot;info&amp;quot;&amp;gt;More information&amp;lt;/button&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="aria-roles">ARIA Roles
&lt;/h3>&lt;p>By default, many semantic &lt;strong>HTML elements&lt;/strong> already have predefined roles. For example, an &lt;code>&amp;lt;input type=&amp;quot;radio&amp;quot;&amp;gt;&lt;/code> has the role of &amp;ldquo;radio.&amp;rdquo; Non-semantic elements like &lt;code>&amp;lt;div&amp;gt;&lt;/code> and &lt;code>&amp;lt;span&amp;gt;&lt;/code> require the role attribute to define their function.&lt;/p>
&lt;p>Below are some common roles that can be very useful in your day-to-day development. For a complete list, check the documentation &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Role Examples:&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ARIA Roles&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>role=&amp;ldquo;alert&amp;rdquo;&lt;/strong>&lt;/td>
&lt;td>Communicates an important and usually time-sensitive message to the user.&lt;/td>
&lt;td>&lt;code>&amp;lt;div role=&amp;quot;alert&amp;quot;&amp;gt;Error: required field not filled in.&amp;lt;/div&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>role=&amp;ldquo;definition&amp;rdquo;&lt;/strong>&lt;/td>
&lt;td>Indicates that the element contains the definition of a term or concept.&lt;/td>
&lt;td>&lt;code>&amp;lt;div role=&amp;quot;definition&amp;quot;&amp;gt;Accessibility: the practice of making the web accessible to everyone.&amp;lt;/div&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>role=&amp;ldquo;search&amp;rdquo;&lt;/strong>&lt;/td>
&lt;td>Defines the search area of the page.&lt;/td>
&lt;td>&lt;code>&amp;lt;div role=&amp;quot;search&amp;quot;&amp;gt;Search box&amp;lt;/div&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>role=&amp;ldquo;modal&amp;rdquo;&lt;/strong>&lt;/td>
&lt;td>Indicates that the element is a modal.&lt;/td>
&lt;td>&lt;code>&amp;lt;div role=&amp;quot;modal&amp;quot;&amp;gt;This is a modal&amp;lt;/div&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>role=&amp;ldquo;dialog&amp;rdquo;&lt;/strong>&lt;/td>
&lt;td>Indicates that the element is a dialog window.&lt;/td>
&lt;td>&lt;code>&amp;lt;div role=&amp;quot;dialog&amp;quot;&amp;gt;This is a dialog window&amp;lt;/div&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="lets-put-it-into-practice">Let&amp;rsquo;s Put It into Practice?
&lt;/h2>&lt;p>And there it is! Now you know how &lt;strong>semantic HTML&lt;/strong> and &lt;strong>WAI-ARIA&lt;/strong> can work together to improve your website&amp;rsquo;s accessibility. Using &lt;strong>semantic HTML&lt;/strong> is like building a house with a solid and well-planned structure, while &lt;strong>WAI-ARIA&lt;/strong> is that final touch that ensures everyone can access and interact with it, regardless of limitations. By applying these practices, you not only make your website more inclusive, but also optimize the user experience and help improve SEO.&lt;/p>
&lt;p>Web accessibility is more than just a good practice — it&amp;rsquo;s a commitment to a fairer and more accessible digital world for everyone.&lt;/p>
&lt;p>Now that you know the basics, how about starting to apply these concepts in your next project? Remember: every small step counts!&lt;/p></description></item></channel></rss>